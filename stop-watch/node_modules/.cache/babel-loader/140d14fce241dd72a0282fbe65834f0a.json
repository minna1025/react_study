{"ast":null,"code":"import _classCallCheck from \"/Users/na-young.min/stop-watch/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/na-young.min/stop-watch/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/na-young.min/stop-watch/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/na-young.min/stop-watch/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/na-young.min/stop-watch/src/TimeSet.js\";\nimport React, { Component, Fragment } from 'react';\n\nvar TimeSet =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TimeSet, _Component);\n\n  function TimeSet(props) {\n    var _this;\n\n    _classCallCheck(this, TimeSet);\n\n    var timerStart;\n    return _possibleConstructorReturn(_this);\n  } // 인풋값의 숫자를 타이머에 셋팅\n\n\n  _createClass(TimeSet, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"time-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"hour\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.state.hour < 10 ? '0' + this.state.hour : this.state.hour), \":\", React.createElement(\"span\", {\n        id: \"min\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.state.min < 10 ? '0' + this.state.min : this.state.min), \":\", React.createElement(\"span\", {\n        id: \"sec\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.sec < 10 ? '0' + this.state.sec : this.state.sec), \":\", React.createElement(\"span\", {\n        id: \"milliSec\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.state.milliSec < 10 ? '0' + this.state.milliSec : this.state.milliSec)), React.createElement(\"div\", {\n        className: \"input-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"time\",\n        value: this.state.inputTime,\n        placeholder: \"0\",\n        onChange: this.timeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"btn-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.state.stating === false ? React.createElement(\"button\", {\n        className: \"start\",\n        onClick: this.timerStart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"start\") : React.createElement(\"button\", {\n        className: \"stop\",\n        onClick: clearInterval(this.timerStop),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"stop\"), React.createElement(\"button\", {\n        className: \"reset\",\n        onClick: this.timerReset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"reset\")));\n    }\n  }]);\n\n  return TimeSet;\n}(Component);\n\nexport default TimeSet;","map":{"version":3,"sources":["/Users/na-young.min/stop-watch/src/TimeSet.js"],"names":["React","Component","Fragment","TimeSet","props","timerStart","state","hour","min","sec","milliSec","inputTime","timeChange","stating","clearInterval","timerStop","timerReset"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;IAEMC,O;;;;;AAUJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,QAAIC,UAAJ;AADiB;AAElB,G,CAED;;;;;6BAqES;AACP,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKC,KAAL,CAAWC,IAAX,GAAkB,EAAlB,GACA,MAAM,KAAKD,KAAL,CAAWC,IADjB,GACwB,KAAKD,KAAL,CAAWC,IAHvC,CADF,OAQE;AAAM,QAAA,EAAE,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKD,KAAL,CAAWE,GAAX,GAAiB,EAAjB,GACA,MAAM,KAAKF,KAAL,CAAWE,GADjB,GACuB,KAAKF,KAAL,CAAWE,GAHtC,CARF,OAeE;AAAM,QAAA,EAAE,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKF,KAAL,CAAWG,GAAX,GAAiB,EAAjB,GACA,MAAM,KAAKH,KAAL,CAAWG,GADjB,GACuB,KAAKH,KAAL,CAAWG,GAHtC,CAfF,OAsBE;AAAM,QAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKH,KAAL,CAAWI,QAAX,GAAsB,EAAtB,GACA,MAAM,KAAKJ,KAAL,CAAWI,QADjB,GAC4B,KAAKJ,KAAL,CAAWI,QAH3C,CAtBF,CADF,EA8BE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,MAAtB;AAA6B,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,SAA/C;AAA0D,QAAA,WAAW,EAAC,GAAtE;AAA0E,QAAA,QAAQ,EAAE,KAAKC,UAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CA9BF,EAiCE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKN,KAAL,CAAWO,OAAX,KAAuB,KAAvB,GACK;AAAQ,QAAA,SAAS,EAAC,OAAlB;AAA0B,QAAA,OAAO,EAAE,KAAKR,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADL,GAEK;AAAQ,QAAA,SAAS,EAAC,MAAlB;AAAyB,QAAA,OAAO,EAAES,aAAa,CAAC,KAAKC,SAAN,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJT,EAME;AAAQ,QAAA,SAAS,EAAC,OAAlB;AAA0B,QAAA,OAAO,EAAE,KAAKC,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,CAjCF,CADF;AA4CD;;;;EAhImBf,S;;AAmItB,eAAeE,OAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\r\n\r\nclass TimeSet extends Component {\r\n  state = {\r\n    hour: 0,\r\n    min: 0,\r\n    sec: 0,\r\n    milliSec: 0,\r\n    inputTime: '',\r\n    stating: false  // 정지상태\r\n  }\r\n\r\n  constructor(props) {\r\n    let timerStart;\r\n  }\r\n\r\n  // 인풋값의 숫자를 타이머에 셋팅\r\n  timeChange = (e) => {\r\n    let val = Math.floor(e.target.value);\r\n    let _sec = val % 60;\r\n    let _min = val / 60;\r\n\r\n    this.setState({\r\n      inputTime: val,\r\n      sec: Math.floor(_sec),\r\n      min: Math.floor(_min % 60),\r\n      hour: Math.floor(_min / 60),\r\n    });\r\n  }\r\n\r\n  timeUpdate = (time) => {\r\n    this.setState({\r\n      sec: Math.floor(time % 60),\r\n      min: Math.floor((time/60) % 60),\r\n      hour: Math.floor((time/60) / 60)\r\n    });\r\n  }\r\n\r\n  // 스타트 버튼 이벤트\r\n  countDown = () => {\r\n    let time = document.getElementById('time').value;\r\n    let _milliSec = 99, _sec, _min, _hour;\r\n\r\n    // let countDown = setInterval(() => {  // 0.001초 마다 실행되게 셋팅\r\n      time = Math.floor(time);\r\n\r\n      _milliSec--;  // 밀리세컨드 카운트다운 실행\r\n      _sec = time;  // 입력받은 시간을 초에 입력\r\n      _min = Math.floor(_sec / 60); // 입력받은 시간(_sec)을 분으로 계산\r\n      _sec = _sec % 60; // 상단에서 분 입력이 끝났으므로 계산 후 남은 초를 입력\r\n      _hour = Math.floor(_min / 60);  // 분이 60분을 넘은 경우 시간으로 입력\r\n      _min = _min % 60;\r\n      _hour = _hour % 24;\r\n      _sec--;\r\n\r\n      if ( _milliSec < 0 ) {\r\n        _milliSec = 99\r\n        time--;\r\n        if ( _sec < 1) {\r\n          time = 0;\r\n          _milliSec = 0;\r\n          this.setState({\r\n            stating: false\r\n          });\r\n          // clearInterval(countDown);\r\n        }\r\n      }else {\r\n        this.setState({\r\n          milliSec: _milliSec,\r\n          sec: _sec,\r\n          min: _min,\r\n          hour: _hour,\r\n          stating: true\r\n        });\r\n      }\r\n    // },1);\r\n  }\r\n\r\n  timerStart = setInterval(countDown, 1);\r\n\r\n  timeStop = () => {\r\n    console.log(1);\r\n    clearInterval(this.timerStart.countDown);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"time-wrap\">\r\n          <span id=\"hour\">\r\n            {\r\n              this.state.hour < 10 ?\r\n              '0' + this.state.hour : this.state.hour\r\n            } \r\n          </span>\r\n          : \r\n          <span id=\"min\">\r\n            {\r\n              this.state.min < 10 ?\r\n              '0' + this.state.min : this.state.min\r\n            } \r\n          </span> \r\n          :\r\n          <span id=\"sec\">\r\n            {\r\n              this.state.sec < 10 ?\r\n              '0' + this.state.sec : this.state.sec\r\n            } \r\n          </span>\r\n          : \r\n          <span id=\"milliSec\">\r\n            {\r\n              this.state.milliSec < 10 ?\r\n              '0' + this.state.milliSec : this.state.milliSec\r\n            }\r\n          </span>\r\n        </div>\r\n        <div className=\"input-row\">\r\n          <input type=\"text\" id=\"time\" value={this.state.inputTime} placeholder='0' onChange={this.timeChange} />\r\n        </div>\r\n        <div className=\"btn-row\">\r\n          {\r\n            this.state.stating === false\r\n              ? (<button className=\"start\" onClick={this.timerStart}>start</button>)\r\n              : (<button className=\"stop\" onClick={clearInterval(this.timerStop)}>stop</button>)\r\n          }\r\n          <button className=\"reset\" onClick={this.timerReset}>reset</button>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimeSet;"]},"metadata":{},"sourceType":"module"}