{"ast":null,"code":"import _classCallCheck from \"/Users/na-young.min/stop-watch/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/na-young.min/stop-watch/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/na-young.min/stop-watch/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/na-young.min/stop-watch/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/na-young.min/stop-watch/src/TimeSet.js\";\nimport React, { Component, Fragment } from 'react';\n\nvar TimeSet =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TimeSet, _Component);\n\n  function TimeSet(prorps) {\n    var _this;\n\n    _classCallCheck(this, TimeSet);\n\n    var _time = document.getElementById('time').value;\n\n    var _milliSec2 = 99,\n        _sec2,\n        _min2,\n        _hour2;\n\n    var _countDown = setInterval(function () {\n      // 0.001초 마다 실행되게 셋팅\n      _time = Math.floor(_time);\n      _milliSec2--; // 밀리세컨드 카운트다운 실행\n\n      _sec2 = _time; // 입력받은 시간을 초에 입력\n\n      _min2 = Math.floor(_sec2 / 60); // 입력받은 시간(_sec)을 분으로 계산\n\n      _sec2 = _sec2 % 60; // 상단에서 분 입력이 끝났으므로 계산 후 남은 초를 입력\n\n      _hour2 = Math.floor(_min2 / 60); // 분이 60분을 넘은 경우 시간으로 입력\n\n      _min2 = _min2 % 60;\n      _hour2 = _hour2 % 24;\n\n      if (_milliSec2 < 0) {\n        _milliSec2 = 99;\n        _time--;\n\n        if (_time < 0) {\n          _time = 0;\n          _milliSec2 = 0;\n\n          _this.setState({\n            stating: false\n          });\n        }\n\n        clearInterval(_countDown);\n      } else {\n        _this.setState({\n          milliSec: _milliSec2,\n          sec: _sec2,\n          min: _min2,\n          hour: _hour2,\n          stating: true\n        });\n      }\n    }, 1);\n\n    return _possibleConstructorReturn(_this);\n  } // 인풋값의 숫자를 타이머에 셋팅\n\n\n  _createClass(TimeSet, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.hour < 10 ? '0' + this.state.hour : this.state.hour, \" :\", this.state.min < 10 ? '0' + this.state.min : this.state.min, \" :\", this.state.sec < 10 ? '0' + this.state.sec : this.state.sec, \" :\", this.state.milliSec < 10 ? '0' + this.state.milliSec : this.state.milliSec, React.createElement(\"div\", {\n        className: \"input-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"time\",\n        value: this.state.inputTime,\n        placeholder: \"0\",\n        onChange: this.timeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"btn-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, this.state.stating === false ? React.createElement(\"button\", {\n        className: \"start\",\n        onClick: this.timerStart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"start\") : React.createElement(\"button\", {\n        className: \"stop\",\n        onClick: this.timerStop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"stop\"), React.createElement(\"button\", {\n        className: \"reset\",\n        onClick: this.timerReset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"reset\")));\n    }\n  }]);\n\n  return TimeSet;\n}(Component);\n\nexport default TimeSet;","map":{"version":3,"sources":["/Users/na-young.min/stop-watch/src/TimeSet.js"],"names":["React","Component","Fragment","TimeSet","prorps","time","document","getElementById","value","_milliSec","_sec","_min","_hour","countDown","setInterval","Math","floor","setState","stating","clearInterval","milliSec","sec","min","hour","state","inputTime","timeChange","timerStart","timerStop","timerReset"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\n\r\nclass TimeSet extends Component {\r\n  state = {\r\n    hour: 0,\r\n    min: 0,\r\n    sec: 0,\r\n    milliSec: 0,\r\n    inputTime: '',\r\n    stating: false  // 정지상태\r\n  }\r\n\r\n  constructor (prorps) {\r\n    let time = document.getElementById('time').value;\r\n    let _milliSec = 99, _sec, _min, _hour;\r\n\r\n    let countDown = setInterval(() => {  // 0.001초 마다 실행되게 셋팅\r\n      time = Math.floor(time);\r\n\r\n      _milliSec--;  // 밀리세컨드 카운트다운 실행\r\n      _sec = time;  // 입력받은 시간을 초에 입력\r\n      _min = Math.floor(_sec / 60); // 입력받은 시간(_sec)을 분으로 계산\r\n      _sec = _sec % 60; // 상단에서 분 입력이 끝났으므로 계산 후 남은 초를 입력\r\n      _hour = Math.floor(_min / 60);  // 분이 60분을 넘은 경우 시간으로 입력\r\n      _min = _min % 60;\r\n      _hour = _hour % 24;\r\n\r\n      if ( _milliSec < 0 ) {\r\n        _milliSec = 99\r\n        time--;\r\n        if ( time < 0) {\r\n          time = 0;\r\n          _milliSec = 0;\r\n          this.setState({\r\n            stating: false\r\n          })\r\n        }\r\n        clearInterval(countDown);\r\n      }else {\r\n        this.setState({\r\n          milliSec: _milliSec,\r\n          sec: _sec,\r\n          min: _min,\r\n          hour: _hour,\r\n          stating: true\r\n        });\r\n      }\r\n    },1);\r\n  }\r\n\r\n  // 인풋값의 숫자를 타이머에 셋팅\r\n  timeChange = (e) => {\r\n    let val = Math.floor(e.target.value);\r\n    let _sec = val % 60;\r\n    let _min = val / 60;\r\n\r\n    this.setState({\r\n      inputTime: val,\r\n      sec: Math.floor(_sec),\r\n      min: Math.floor(_min % 60),\r\n      hour: Math.floor(_min / 60),\r\n    });\r\n  }\r\n\r\n  timeUpdate = (time) => {\r\n    this.setState({\r\n      sec: Math.floor(time % 60),\r\n      min: Math.floor((time/60) % 60),\r\n      hour: Math.floor((time/60) / 60)\r\n    });\r\n  }\r\n\r\n  timerStop = () => {\r\n    this.setState({\r\n      // thi\r\n    });\r\n  }\r\n\r\n  // 스타트 버튼 이벤트\r\n  timerStart = () => {\r\n    let time = document.getElementById('time').value;\r\n    let _milliSec = 99, _sec, _min, _hour;\r\n\r\n    let countDown = setInterval(() => {  // 0.001초 마다 실행되게 셋팅\r\n      time = Math.floor(time);\r\n\r\n      _milliSec--;  // 밀리세컨드 카운트다운 실행\r\n      _sec = time;  // 입력받은 시간을 초에 입력\r\n      _min = Math.floor(_sec / 60); // 입력받은 시간(_sec)을 분으로 계산\r\n      _sec = _sec % 60; // 상단에서 분 입력이 끝났으므로 계산 후 남은 초를 입력\r\n      _hour = Math.floor(_min / 60);  // 분이 60분을 넘은 경우 시간으로 입력\r\n      _min = _min % 60;\r\n      _hour = _hour % 24;\r\n\r\n      if ( _milliSec < 0 ) {\r\n        _milliSec = 99\r\n        time--;\r\n        if ( time < 0) {\r\n          time = 0;\r\n          _milliSec = 0;\r\n          this.setState({\r\n            stating: false\r\n          })\r\n        }\r\n        clearInterval(countDown);\r\n      }else {\r\n        this.setState({\r\n          milliSec: _milliSec,\r\n          sec: _sec,\r\n          min: _min,\r\n          hour: _hour,\r\n          stating: true\r\n        });\r\n      }\r\n    },1);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {\r\n          this.state.hour < 10 ?\r\n          '0' + this.state.hour : this.state.hour\r\n        } : \r\n        {\r\n          this.state.min < 10 ?\r\n          '0' + this.state.min : this.state.min\r\n        } : \r\n        {\r\n          this.state.sec < 10 ?\r\n          '0' + this.state.sec : this.state.sec\r\n        } : \r\n        {\r\n          this.state.milliSec < 10 ?\r\n          '0' + this.state.milliSec : this.state.milliSec\r\n        }\r\n        <div className=\"input-row\">\r\n          <input type=\"text\" id=\"time\" value={this.state.inputTime} placeholder='0' onChange={this.timeChange} />\r\n        </div>\r\n        <div className=\"btn-row\">\r\n          {\r\n            this.state.stating === false\r\n              ? (<button className=\"start\" onClick={this.timerStart}>start</button>)\r\n              : (<button className=\"stop\" onClick={this.timerStop}>stop</button>)\r\n          }\r\n          <button className=\"reset\" onClick={this.timerReset}>reset</button>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimeSet;"]},"metadata":{},"sourceType":"module"}